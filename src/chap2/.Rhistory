q()
q()
x<-[0.2,0.7,0.3,0.9,0.1,0.2,2.0,0.1,1.2,-0.9]
x<-c(0.2,0.7,0.3,0.9,0.1,0.2,2.0,0.1,1.2,-0.9)
mean(x)
var(x)
x.test
t.test(x)
-1.833*0.604+0.48
1.833*0.604+0.48
80/400-(80/400)**2
80/400
(80/400)*(1-80/400)
80/400
-1.96*0.16+0.2
1.96*0.16+0.2
binom.test(80,400)
sqrt(400)
-1.96*sqrt(0.16/400)+0.23
-1.96*sqrt(0.16/400)+0.2
-1.833*sqrt(0.604/10)+0.48
1.833*sqrt(0.604/10)+0.48
t.test(x)
x
t.test(x,conf)
t.test(x,conf.level = 0.9)
t.test(x,conf.level = 0.9)
t.test(x,conf.level = 0.95)
t.test(x,conf.level = 0.85)
t.test(x,conf.level = 0.50)
t.test(x,conf.level = 0.01)
t.test(x,conf.level = 0.001)
t.test(x,conf.level = 0.0001)
t.test(x,conf.level = 0.00000001)
t.test(x,conf.level = 0.1)
t.test(x,conf.level = 0.9)
t.test(x,conf.level = 0.1)
t.test(x,mu=0,conf.level = 0.95)
t.test(x,mu=0.5,conf.level = 0.95)
t.test(x,mu=0.48,conf.level = 0.95)
t.test(x,mu=0,conf.level = 0.95)
(0-0.48)/sqrt(0.604/10)
t.test(x,mu=0,conf.level = 0.90)
t.test(x,mu=0,conf.level = 0.95)
q()
q()
load("~/Documents/演習用データ/.RData")
shapiro.test(return4$x4927)
ks.test(return4$x4927)
ks.test(return4$x4927,y="pnorm")
ks.test(return4$x5202,y="pnorm")
ks.test(return4$x7272,y="pnorm")
ks.test(return4$x4502,y="pnorm")
library(tseries)
install.packages("tseries")
ls()
libray(tseries)
library(tseries)
runs.test(as.factor(return4$x7272<mean(return4$x7272)))
par(mfcol=c(2,2))
plot(X.price,type="l")
plot(X.return,type="l")
plot(Y.price,type="l")
plot(Y.return,type="l")
class(X.price)
par(mfcol=c(2,1))
plot(X.price,type="l")
plot(X.return,type="l")
abline(h=0,lty=3)
par(mfcol=c(2,1))
par(mfcol=c(1,2))
hist(X.return)
hist(Y.return)
par(mfcol=c(1,2))
plot(x=X.return[1:99,y=X.return[2:100]])
plot(x=X.return[1:99],y=X.return[2:100])
plot(x=Y.return[1:99],y=Y.return[2:100])
acf(X.return,plot=F)
acf(X.return)
acf(Y.return)
acf(X.return,plot=F,type="p")
par()
acf(X.return,type="p")
acf(Y.return,type="p")
Box.test(X.return,type="L")
Box.test(Y.return,type="L")
ar(X.return,aic=F,order.max = 1)
ar(Y.return,aic=T,order.max=1)
adf.test(price4$x7272)
adf.test(return4$x7272)
par(mfcol=c(2,1))
plot(data.log.return$x9041,type="l",ylab="Return")
plot(data.log.return$x9042,type="l",ylab="Return")
ar.fit1=ar(data.log.return$x9041)
ar.fit1
ar.fit2=ar(data.log.return$x9042)
ar.fit2
acf(data.log.return$x9041)
acf(data.log.return$x9042)
acf(ar.fit1$resid[-1])
acf(ar.fit2$resid[-1])
ar(ar.fit1$resid[-1])$order
ar(ar.fit2$resid[-1])$order
Box.test(ar.fit1$resid[-1],type="l")
Box.test(ar.fit1$resid[-1],type="L")
install.packages("fGarch")
arma(data.log.return$x9041)
plot(arma(data.log.return$x9041))
plot(arma(data.log.return$x9041),type="l")
library(fGarch)
arch.fit1=garchFit(~arma(1,0)+garch(1,0),data=data.log.return$x9041,trace=F)
arch.fit1
plot(Date[-1],arch.fit1@sigma.t^2,type="l",xlab="Date",ylab="Volatility")
par(mfcol=(0,0))
par(mfcol=c(0,0))
par(mfcol=c(1,0))
par(mfcol=c(1,1))
plot(Date[-1],arch.fit1@sigma.t^2,type="l",xlab="Date",ylab="Volatility")
qqnorm(arch.fit1@residuals/arch.fit1@sigma.t)
abline(0,1)
ks.test(x=arch.fit1@residuals/arch.fit1@sigma.t,y="pnorm")
arch.fit2=garchFit(~arma(1,0)+garch(1,1),data=data.log.return$x9041,trace=F)
arch.fit2
plot(density(arch.fit1@residuals/arch.fit1@sigma.t),main="Density")
lines(-300:300/100.dnorm(-300:300/100,0,1),lty=2,col=2)
lines(-300:300/100,dnorm(-300:300/100,0,1),lty=2,col=2)
plot(density(arch.fit2@residuals/arch.fit1@sigma.t),main="Density")
lines(-300:300/100,dnorm(-300:300/100,0,1),lty=2,col=2)
arch.fit3=garchFit(~garch(1,0),data=data.log.return$9041,cond.dist="snorm",trace=F)
arch.fit3=garchFit(~garch(1,0),data=data.log.return$x9041,cond.dist="snorm",trace=F)
arch.fit3
library(lattice)
qqmath(~arch.fit3@residuals/arch.fit3@sigma.t,distribution = function(p){qsnorm(p,xi=1.2282)})
abline(0,1)
spec=garchSpec(model=list(mu=arch.fit3@fit$coef[1],omega=arch.fit3@fit$coef[2],alpha=arch.fit3@fit$coef[3],beta=0,skew=arch.fit3@fit$coef[4]),cond.dist=c("snorm"))
spec=garchSpec(model=list(mu=arch.fit3@fit$coef[1],omega=arch.fit3@fit$coef[2],alpha=arch.fit3@fit$coef[3],beta=0,skew=arch.fit3@fit$coef[4]),cond.dist=c("snorm"))
PL=NULL;Price=data.price$x9041[121]
for (i in 1:10000) {PL[i]=Price*exp(sum(garchSim(spec,10))/100)}
PL=PL-Price
class(PL)
plot(PL)
hist(PL)
par(mfcol=c(2,1))
plot(sample1,type="l")
plot(sample2,type="l")
cor(sample1,sample2)
cor(sample1,sample2)
par(mfcol=c(2,1))
plot(comprod(1+sample1/100),type="l",ylab="Price",main="sample1")
plot(cumprod(1+sample1/100),type="l",ylab="Price",main="sample1")
plot(cumprod(1+sample2/100),type="l",ylab="Price",main="sample2")
adf.test(yindex)
lm.fit1=lm(data.cum.return$x1332~yindex)
summary(lm.fit1)
fit.clust=hclust(dist(t(data.log.core30)))
plot(fit.clust)
set.seed(1)
white.noise=rnorm(n=400)
plot(white.noise,type="l")
par(mfcol=c(1,1))
plot(white.noise,type="l")
acf(white.noise)
random.walk=cunsum(white.noise)
random.walk=cunsum(white.noise)
library(base)
random.walk=cunsum(white.noise)
random.walk=cumsum(white.noise)
white.noise
random.walk
plot(random.walk,type="l")
acf(random.walk)
N<-10
T<-100
path<-apply(matrix(rnorm(N*T),nrow = T,ncol=N),2,cumsum)
matplot(path,type="l",ylab="Value",xlab="Time")
path<-apply(matrix(rnorm(N*T),nrow = T,ncol=1),2,cumsum)
matplot(path,type="l",ylab="Value",xlab="Time")
q()
install.packages(urca)
install.packages("fpp")
install.packages("vars")
library(vars)
library(urca)
library(fpp)
library(ggplot2)
library(ggfortify)
autoplot(usconsumption,facets=T)
summary(ur.df(usconsumption[,"consumption"],type="drift"))
autoplot(ccf(usconsumption[,"consumption"],usconsumption[,"income"],plot=F))
select_result<-VARselect(usconsumption,lag.max=10,type="const")
select_result
var_bestorder<-VAR(y=usconsumption,type="const",p=select_result$selection[1])
summary(var_bestorder)
predict(var_bestorder,n.ahead = 4)
autoplot(predict(var_bestorder,n.ahead=8),ts.colour=1,predict.colour = 1,predict.linetype = "dashed")
causality(var_bestorder,cause="income")
causality(var_bestorder,cause="consumption")
irf_consumption<-irf(var_bestorder,impulse="consumtion",responce=c("consumption","income"),n.ahead=12,boot=T)
irf_consumption<-irf(var_bestorder,impulse="consumption",responce=c("consumption","income"),n.ahead=12,boot=T)
plot(irf_consumption)
plot(fevd(var_bestorder,n.ahead=12))
library(xts)
install.packages(fGarch)
install.packages("fGarch")
library(fGarch)
install.packages("rugarch")
library(rugarch)
library(forecast)
librra
library(tseries)
library(gridExtra)
n_sample<-1000
spec1<-garchSpec(model=list(omega=0.0001,alpha=0.4,beta=0.5,mu=0.1),cond.dist="norm")
set.seed(1)
sim_garch<-garchSim(spec1,n=n_sample,extended = T)
head(sim_garch,n=2)
autoplot(sim_garch[,-3],facets=T,ylab="")
p_acf<-autoplot(acf(sim_garch[,"garch"],plot=F),main="raw series")
p_acf_sq<-autoplot(acf(sim_garch[,"garch"]^2,plot=F),main="squered series")
grid.arrange(p_acf,p_acf_sq,ncol=1)
set.seed(2)
sim_garch<-garchSim(spec1,n=n_sample,extended = T)
autoplot(sim_garch[,-3],facets=T,ylab="")
p_acf<-autoplot(acf(sim_garch[,"garch"],plot=F),main="raw series")
p_acf_sq<-autoplot(acf(sim_garch[,"garch"]^2,plot=F),main="squered series")
grid.arrange(p_acf,p_acf_sq,ncol=1)
mod_fGarch<-garchFit(formula=~ garch(1,1),data=sim_garch[,"garch"],include.mean = T,trace=F)
coef(mod_fGarch)
spec_rugarch1<-ugarchspec(variance.model = list(model="sGARCH",garchOrder=c(1,1)),mean.model = list(armaOrder=c(0,0),include.mean=TRUE),distribution.model = "norm")
mod_rugarch<-ugarchfit(spec=spec_rugarch1,data=sim_garch[,"garch"],solver="hybrid")
coef(mod_rugarch)
codef(mod_fGarch)
coef(mod_fGarch)
coef(mod_rugarch)
summary(mod_fGarch)
summary(mod_rugarch)
mod_rugarch
spec2<-garchSpec(model=list(omega=0.001,alpha=0.5,beta=0.4,mu=0.1,ar=-0.6,ma=-0.5),cond.dist="norm")
set.seed(0)
sim_arma_garch<-garchSim(spec2,n=n_sample,extended=F)
head(sim_arma_garch,n=2)
class(sim_arma_garch)
autoplot(sim_arma_garch[,"garch"])
mod_arma<-Arima(sim_arma_garch,order=c(1,0,1))
checkresiduals(mod_arma)
summary(mod_arma)
spec_rugarch2<-ugarchspec(variance.model = list(model="sGARCH",garchOrder=c(1,1)),mean.model = list(armaOrder(1,1),include.mean=TRUE),distribution.model = "norm")
spec_rugarch2<-ugarchspec(variance.model = list(model="sGARCH",garchOrder=c(1,1)),mean.model = list(armaOrder=c(1,1),include.mean=TRUE),distribution.model = "norm")
mod_arma_garch<-ugarchfit(spce=spce_rugarch2,data=sim_arma_garch,solver="hybrid")
mod_arma_garch<-ugarchfit(spce=spec_rugarch2,data=sim_arma_garch,solver="hybrid")
mod_rugarch<-ugarchfit(spec=spec_rugarch2,data=sim_arma_garch,solver="hybrid")
summary(mod_rugarch)
coef(mod_rugarch)
mod_arma_garch<-ugarchfit(spec=spec_rugarch2,data=sim_arma_garch,solver="hybrid")
coef(mod_rugarch)
codf(mod_arma_garch)
coef(mod_arma_garch)
coef(mod_rugarch)
mod_arma_garch<-ugarchfit(spec=spec_rugarch1,data=sim_arma_garch,solver="hybrid")
mod_arma_garch<-ugarchfit(spec=spec_rugarch2,data=sim_arma_garch,solver="hybrid")
mod_rugarch<-ugarchfit(spec=spec_rugarch1,data=sim_arma_garch,solver="hybrid")
coef(mod_rugarch)
coef(mod_arma_garch)
mod_rugarch
mod_arma_garch
mod_arma
resid_arma_garch<-residuals(mod_arma_garch)/sigma(mod_arma_garch)
resid_garch<-residuals(mod_rugarch)/sigma(mod_rugarch)
resid_arma<-mod_arma$residuals/sqrt(mod_arma$sigma2)
d<-data.frame(arma_garch=resid_arma_garch,garch=resid_garch,arma=resid_arma)
autoplot(ts(d),facets = T,ylab="",main="Standarized Residual")
data(spyreal)
head(spyreal,n=2)
spec_rugarch3<-ugarchspec(variance.model = list(model="gjrGARCH",garchOrder=c(1,1)),mean.model = list(armaOrder=c(1,1)),distribution.model = "std")
mod_gjr<-ugarchfit(spec=spec_rugarch3,data=spyreal[,1],solver="hybrid")
coef(mod_gjr)
spec_rugarch4<-ugarchspec(variance.model = list(model="sGARCH",garchOrder=c(1,1)),mean.model = list(armaOrder=c(1,1)),distribution.model = "std")
mod_standard_garch<-ugarchfit(spec=spec_rugarch4,data=spyreal[,1],solver="hybrid")
infocriteria(mod_gjr)["Akaike",]
infocriteria(mod_standard_garch)["Akaike",]
d_xts<-spyreal[,1]
d_xts$volatility<-sigma(mod_gjr)
autoplot(d_xts,facets=T,ylab="")
pred<-ugarchboot(mod_gjr,n.ahead=50,method="Partial")
class(pred)
pred
autoplot(pred)
pred$Series
pred$forcast
q()
q()
install.packages("arules")
install.packages("arulesSequences")
.libPaths
.libPaths()
library(arules)
df<-read.csv("../../data/processed/1.1-association_data.csv",fileEncoding="UTF-8")
q()
q()
q()
seq(0.03,0.01,by=-0.001)
seq(0.03,0.01,by=-0.001)[1]
seq(0.03,0.01,by=-0.001)[0]
seq(0.03,0.01,by=-0.001)[-22]
seq(0.03,0.01,by=-0.001)[-21]
seq(0.03,0.01,by=-0.001)[-22]
seq(0.03,0.01,by=-0.001)
seq(0.03,0.01,by=-0.001)[-22]
q()
v=1/1.03
D=(v^(0:87))*1
D
(v^(0:87))
N=rev(cumsum(rev(D)))
N
ad=N[41]/D[1:40]
ad
N[41]
N[1:40]
ar=N[41:88]/D[41:88]
ar
aa=(N[1:40]-N[41])/D[1:40]
aa
ib=0:39/40
ib
L=sum(la)
ad
setwd("~/Documents/StatisticalAnalysis/actuary/src/chap2")
source("pensioncontribution")
source("pensioncontribution")
q<-read.table("../chap1/shibouritu07M.txt",header=T)
source("pensioncontribution")
source("pensioncontribution")
source("pensioncontribution",encoding = "shift-jis")
source("pensioncontribution",fileEncoding = "shift-jis")
source("pensioncontribution",encoding = "shift-jis")
la
la*ad
ad
N[41]
N
ad
N
Sa
D
l
vv
J
N[42]
D[J]
D
1/40*N[42]/D[J]
q()
